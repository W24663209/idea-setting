<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="814" />
    <option name="newTranslationDialogY" value="473" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="重试" />
      <item value="No active profile set, falling back to 1 default profile: &quot;default&quot;" />
      <item value="exclude Transitive" />
      <item value="exists" />
      <item value="If you have database settings to be loaded from a particular profile you may need to activate it (the profiles -Duser.timezone=GMT+5:30 are currently active)." />
      <item value="{&quot;status&quot;:&quot;FAILURE&quot;,&quot;message&quot;:&quot;INVALID Transfer Type&quot;,&quot;timestamp&quot;:&quot;17-Nov-2022 17:58:52 Thursday&quot;,&quot;data&quot;:null}" />
      <item value="余额" />
      <item value="Cannot deserialize value of type `java.lang.String` from Object value (token `JsonToken.START_OBJECT`)" />
      <item value="convert failed. str:" />
      <item value="Could not write JSON: Java 8 datetime type `java.time.LocalDateTime` not supported by default: add Module &quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot; to enable handling (through reference chain: com.ruoyi.common.rocketmq.RocketMQEntity[&quot;t&quot;]-&gt;com.ruoyi.order.domain.Payment[&quot;createdTime&quot;]); nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 datetime type `java.time.LocalDateTime` not supported by default: add Module &quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot; to enable handling (through reference chain: com.ruoyi.common.rocketmq.RocketMQEntity[&quot;t&quot;]-&gt;com.ruoyi.order.domain.Payment[&quot;createdTime&quot;]); nested exception is org.springframework.messaging.converter.MessageConversionException: Could not write JSON: Java 8 datetime type `java.time.LocalDateTime` not supported by default: add Module &quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot; to enable handling (through reference chain: com.ruoyi.common.rocketmq.RocketMQEntity[&quot;t&quot;]-&gt;com.ruoyi.order.domain.Payment[&quot;createdTime&quot;]); nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 datetime type `java.time.LocalDateTime` not supported by default: add Module &quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot; to enable handling (through reference chain: com.ruoyi.common.rocketmq.RocketMQEntity[&quot;t&quot;]-&gt;com.ruoyi.order.domain.Payment[&quot;createdTime&quot;])" />
      <item value="add Module &quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot; to enable handling" />
      <item value="Invalid Credentials" />
      <item value="FAILURE" />
      <item value="Username - field missed, pleasec check" />
      <item value="Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@a9f4435]" />
      <item value="The error may involve cn.bensun.service.mapper.PaymentChannelRateMapper.selectList" />
      <item value="The consumer group[group_pay_out_topic] has been created before, specify another name please." />
      <item value="Failed to start RocketMQ push consumer" />
      <item value="批量" />
      <item value="Error request, response status: 403" />
      <item value="com.ruoyi.quartz.domain.phonepe.RequestProperty; local class incompatible: stream classdesc serialVersionUID = 3837843048784387955, local class serialVersionUID = 1" />
      <item value="com.ruoyi.quartz.domain.phonepe.RequestProperty; local class incompatible: stream classdesc serialVersionUID = 3837843048784387955, local class serialVersionUID = -4907450227072233951" />
      <item value="transaction Type" />
      <item value="total Results" />
      <item value="Parameter 'date' not found. Available parameters are [arg2, arg1, arg0, param3, param1, param2]" />
      <item value="商家结算" />
      <item value="; Duplicate entry 'PAY-IN-5A74417FE0BF41358DF1035CA46ABDAD' for key 'select_one_for_update'; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry 'PAY-IN-5A74417FE0BF41358DF1035CA46ABDAD' for key 'select_one_for_update'" />
      <item value="&lt;!DOCTYPE HTML PUBLIC &quot;-W3CDTD HTML 3.2 FinalEN&quot;&gt;" />
      <item value="Cannot deserialize value of type `com.ruoyi.merchant.domain.Merchant` from Array value (token `JsonToken.START_ARRAY`)" />
      <item value="org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.ruoyi.merchant.domain.Merchant` from Array value (token `JsonToken.START_ARRAY`); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.ruoyi.merchant.domain.Merchant` from Array value (token `JsonToken.START_ARRAY`)" />
      <item value="scan Package By Super" />
      <item value="Base Service" />
      <item value="Exception In Initializer Error" />
      <item value="找不到service" />
      <item value="余额不足" />
      <item value="SECONDS" />
      <item value="Role" />
      <item value="combination Count" />
      <item value="arrangement Count" />
      <item value="sync Send" />
      <item value="sendDefaultImpl call timeout; nested exception is org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout" />
      <item value="attempt to unlock lock, not locked by current thread by node id: 78afc028-12f9-460d-8ba9-0b818eea91e4 thread-id: 95" />
      <item value="Acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. Implementation Considerations A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation." />
      <item value="com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction" />
      <item value="Deadlock found when trying to get lock; try restarting transaction" />
      <item value="force Unlock" />
      <item value="Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted. If the lock is available this method returns immediately with the value true. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The lock is acquired by the current thread; or Some other thread interrupts the current thread, and interruption of lock acquisition is supported; or The specified waiting time elapses If the lock is acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is interrupted while acquiring the lock, and interruption of lock acquisition is supported, then InterruptedException is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. Implementation Considerations The ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation. The programmer should be aware that this may be the case. An implementation should document when this is the case. An implementation can favor responding to an interrupt over normal method return, or reporting a timeout. A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation. Params: time – the maximum time to wait for the lock unit – the time unit of the time argument Returns: true if the lock was acquired and false if the waiting time elapsed before the lock was acquired Throws: InterruptedException – if the current thread is interrupted while acquiring the lock (and interruption of lock acquisition is supported)" />
      <item value="Could not open JDBC Connection for transaction; nested exception is java.sql.SQLTransientConnectionException: DatebookHikariCP - Connection is not available, request timed out after 30003ms." />
      <item value="try Lock Async" />
      <item value="Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@19900be7]" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="410" />
        <entry key="ENGLISH" value="411" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="KURDISH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1668602171399" />
  </component>
  <component name="Settings">
    <option name="aliTranslateSettings">
      <app-key>
        <option name="appId" value="LTAI5tLQNbpeipWseroscoNa" />
      </app-key>
    </option>
    <option name="showWordForms" value="false" />
  </component>
</application>